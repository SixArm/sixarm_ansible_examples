# Create a AWS EC2 general purpose server.
#
# This uses Amazon Web Services (AWS) Elastic Compute Cloud (EC2).
#
# This uses environment variables:
#
#    * AWS_ACCESS_KEY or EC2_ACCESS_KEY
#    * AWS_SECRET_ACCESS_KEY or EC2_SECRET_KEY
#    * AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN
#
# Mandatory variable:
#
#    * zid: a unique identifier that this script uses to tag the instance.
#      This is what constrains this script to produce exactly one instance.
#
- name: Create AWS EC2 general purpose server with our preferences
  ec2:

    ###
    #
    # Location
    #
    ###

    # AWS EC2 Region: Currently we prefer US East (N. Virgina) because
    # it's the only one that's able to use Cluster Compute instances,
    # and also it's the region where we have our existing servers.
    #
    region: "{{ region | default('us-east-1') }}"

    # AWS EC2 Availability Zone: Currently we prefer "us-east-1a"
    # because it's the zone where we have many existing servers.
    #
    zone: "{{ zone | default('us-east-1a') }}"

    ###
    #
    # Server
    #
    ###

    # Instance type: Currently we use "m3.medium" for a typical server.
    #
    # Amazon offers Fixed Performance Instances (e.g. M3, C3, and R3)
    # and Burstable Performance Instances (e.g. T2). T2 instances are
    # for workloads that donâ€™t use the full CPU often or consistently.
    # but occasionally need to burst. Bursts use up EC2 credits.
    #
    # We prefer m3.medium because it is the first tier of Amazon's
    # general purpose instances with fast solid state drives (SSDs).
    # The m3 instances can be created with SSD ephemeral storage,
    # which has much greater I/O capacity than persistent EBS storage.
    # For comparison, EC2 T2 instances do not have the SSD option.
    #
    # We like to compare instance types by using this table:
    # http://www.ec2instances.info/
    #
    instance_type: "{{ instance_type | default ('m3.medium') }}"

    # AMI: Currently we prefer using the official Canonical AMIs for
    # Ubuntu because we also using Ubuntu for our developer systems.
    #
    # We prefer the normal release (not LTS) for our prime server,
    # because the normal release tends to have new features we want,
    # and we're ok with giving up a bit of the LTS stability.
    #
    # We prefer hardware virtual machine (HVM) vs. paravirtual (PV),
    # because HVM can take advantage of special hardware extensions
    # for CPU, network, and storage, for better performance.
    #
    # Get the AMI list: https://cloud-images.ubuntu.com/locator/ec2/
    #
    image: "{{ image | default('ami-8696b3ec') }}"

    ###
    #
    # Security
    #
    ###

    # Key pair name to use to create the instance.
    #
    # The key pair name must already exist on EC2,
    # and in the same EC2 region as the new instance.
    #
    # We created a key pair named "default".
    #
    # To manage your key pairs:
    # https://console.aws.amazon.com/ec2/v2/home?region=us-east-1#KeyPairs
    #
    key_name: "{{ key_name | default('default') }}"

    # Security group name (or list of group names) for the host ports.
    #
    # These security groups are akin to a virtual firewall protection.
    # Our default group is named "default" and allows all traffic.
    #
    # Your VPC automatically comes with a default security group.
    # Each EC2 instance that you launch in your VPC is automatically
    # associated with the default security group if you don't specify
    # a different security group when you launch the instance.
    #
    # The default security group has two rules:
    #
    #   * Allow everything from instances within the same security group.
    #   * Allow all outbound traffic.
    #
    # You can change the rules for your default security group.
    # You cannot delete the default group, nor change the name "default".
    #
    # To see your AWS EC2 security groups:
    # https://console.aws.amazon.com/ec2/v2/home?region=us-east-1#SecurityGroups
    #
    group: "{{ group | default('default') }}"

    ###
    #
    # Enhancement
    #
    ###

    # Enable/disable the Termination Protection.
    termination_protection: "{{ termination_protection | default('yes') }}"

    # Enable/disable detailed monitoring e.g. CloudWatch.
    monitoring: "{{ monitoring | default('yes') }}"

    # Enable/disable the instance using optimized EBS volumes.
    #
    # We prefer EBS optimized volumes if they are available.
    # They are not available on our default m3.medium instance.
    #
    ebs_optimized: "{{ ebs_optimized | default('no') }}"

    ###
    #
    # Tags
    #
    ###

    # Tag the instance with any kind of key-value tagging we want.
    #
    # Ansible uses the tags to track starting and stoppping instances.
    #
    # We use a "ZID" which is similar to a "UUID" or "GID" unique ID.
    # This is because we want exactly one instance running.
    #
    # If you want to create multiple instances, such as 5 webservers,
    # then you can use any tag you want, such as "purpose: webserver".
    #
    instance_tags:
      zid: "{{ zid | mandatory }}"

    # Use 'count_tag' in combination with 'exact_count' to ensure the
    # script is idempotent, i.e. creates the correct number of instances.
    #
    # We count the "ZID" tag, which we know is unique to an instance.
    # This is because we want exactly one instance running.
    #
    count_tag:
      zid: "{{ zid | mandatory }}"

    # How many instances matching the 'count_tag' parameter must be running.
    #
    # We want exactly one instance running.
    #
    exact_count: "{{ exact_count | default(1) }}"

    ###
    #
    # Wait
    #
    ###

    # Wait for the instance to be 'running' before returning?
    wait: "{{ wait | default('yes') }}"

    # How long before wait gives up, in seconds.
    wait_timeout: "{{ wait_timeout | default(800) }}"
